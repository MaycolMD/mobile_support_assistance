// Mocks generated by Mockito 5.4.4 from annotations
// in project/test/mocks/support_mocks/support_test.mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:project/data/datasources/remote/interfaces/I_support_datasource.dart'
    as _i2;
import 'package:project/domain/entities/user_support.dart' as _i4;
import 'package:project/domain/repositories/interfaces/I_support_repository.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ISupportDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockISupportDataSource extends _i1.Mock
    implements _i2.ISupportDataSource {
  MockISupportDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.UserSupport>> getSupports() => (super.noSuchMethod(
        Invocation.method(
          #getSupports,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.UserSupport>>.value(<_i4.UserSupport>[]),
      ) as _i3.Future<List<_i4.UserSupport>>);

  @override
  _i3.Future<_i4.UserSupport?> getSupportById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getSupportById,
          [id],
        ),
        returnValue: _i3.Future<_i4.UserSupport?>.value(),
      ) as _i3.Future<_i4.UserSupport?>);

  @override
  _i3.Future<bool> isGetSupport(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isGetSupport,
          [
            email,
            password,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> addSupport(_i4.UserSupport? userSupport) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSupport,
          [userSupport],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<_i4.UserSupport?> getSupportByName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSupportByName,
          [name],
        ),
        returnValue: _i3.Future<_i4.UserSupport?>.value(),
      ) as _i3.Future<_i4.UserSupport?>);

  @override
  _i3.Future<bool> checkEmailExists(String? email) => (super.noSuchMethod(
        Invocation.method(
          #checkEmailExists,
          [email],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteSupport(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSupport,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> updateSupport(_i4.UserSupport? userSupport) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSupport,
          [userSupport],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [ISupportRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockISupportRepository extends _i1.Mock
    implements _i5.ISupportRepository {
  MockISupportRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.UserSupport>> getSupports() => (super.noSuchMethod(
        Invocation.method(
          #getSupports,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.UserSupport>>.value(<_i4.UserSupport>[]),
      ) as _i3.Future<List<_i4.UserSupport>>);

  @override
  _i3.Future<_i4.UserSupport?> getSupportByName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSupportByName,
          [name],
        ),
        returnValue: _i3.Future<_i4.UserSupport?>.value(),
      ) as _i3.Future<_i4.UserSupport?>);

  @override
  _i3.Future<_i4.UserSupport?> getSupportById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getSupportById,
          [id],
        ),
        returnValue: _i3.Future<_i4.UserSupport?>.value(),
      ) as _i3.Future<_i4.UserSupport?>);

  @override
  _i3.Future<bool> isGetSupport(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isGetSupport,
          [
            email,
            password,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> addSupport(_i4.UserSupport? userSupport) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSupport,
          [userSupport],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> checkEmailExists(String? email) => (super.noSuchMethod(
        Invocation.method(
          #checkEmailExists,
          [email],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteSupport(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSupport,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> updateSupport(_i4.UserSupport? userSupport) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSupport,
          [userSupport],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
